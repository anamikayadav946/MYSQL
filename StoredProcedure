1. Create a stored procedure to find the number of films less than a given replacement cost.
soln -
DELIMITER //
CREATE PROCEDURE repl_co(IN r_c int)
BEGIN
select count(*) as number_of_films from film 
where replacement_cost < r_c limit 5;
END //
DELIMITER ;

call repl_co(10);

2. Create a stored procedure that returns the total number of rentals for a specific film id(consider film_id=1)

Table name: inventory

Column	Type
inventory_id	INTEGER
film_id	INTEGER
store_id	INTEGER
last_update	TIMESTAMP
Table name: rental

Column	Type
rental_id	INTEGER
rental_date	DATETIME
inventory_id	INTEGER
customer_id	INTEGER
return_date	DATETIME
staff_id	INTEGER
last_update	TIMESTAMP

Soln - 
DELIMITER //
CREATE PROCEDURE get_rental_count(IN id INT, OUT rental_count INT)
BEGIN 
SELECT count(*) into rental_count from rental 
where inventory_id IN 
(select inventory_id From inventory where film_id = id);
END //

DELIMITER ;
CALL get_rental_count(1, @rental_count);
select @rental_count;

3. Create a stored procedure called get_customer_rental_history that takes in a customer ID and returns the rental history for that customer, 
including the film title, rental date, and return date.

Soln - 
DELIMITER //
CREATE PROCEDURE get_customer_rental_history(IN customer_id INT)
BEGIN
SELECT f.title, r.rental_date, r.return_date
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE r.customer_id = customer_id
ORDER BY r.rental_date DESC;
END //
DELIMITER ;

CALL get_customer_rental_history(5);

4. Create a procedure which takes the film length as input and gives the number of films whose length is more than that.
Soln - 
DELIMITER //
create procedure count_no_film (IN len_film int)
BEGIN
Select count(film_id) as no_of_film from film where length > len_film;
END //

call count_no_film(86);

5. Consider p1(a,b) and p2(c,d) to be two points on a 2D plane.

a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
d happens to equal the maximum value in Western Longitude (LONG_W in STATION).

Sol - Select round(abs(max(lat_n)-min(lat_n))+ abs(max(long_w)-min(long_w)),4) as result from station;

6. Consider p1(a,c) and p2(b,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern 
Latitude (LAT_N) and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points p1 and p2 and format your answer to display 4 decimal digits.

Sol - Select round(SQRT(POWER(abs(max(lat_n)-min(lat_n)),2)+ POW(abs(max(long_w)-min(long_w)),2)), 4) 
as result from station;


7. Query the Manhattan Distance between points p1 and p2 and round it to a scale of 4 decimal places.
Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to 4 decimal places.
Input Format

The STATION table is described as follows:

Table name: STATION

Column	Type
ID	INTEGER
CITY	VARCHAR
STATE	VARCHAR
LAT_N	numeric
LONG_W	numeric
where LAT_N is the northern latitude and LONG_W is the western longitude.

Soln - select round(min(LAT_N),4) as smallest_latitude from station where LAT_N>38.7880;

8. Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780. 
Round your answer to 4 decimal places.

Soln - Select LONG_W as Corresponding_Longitude from station where LAT_N = (select round(min(LAT_N),4) as smallest_latitude from station 
where LAT_N>38.7880);
